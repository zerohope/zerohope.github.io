<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[“大”数据处理]]></title>
    <url>%2F2019%2F11%2F12%2F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[最近帮老师处理了一批OJ数据，整个过程非常艰辛。原始数据长这样。 这是一个答题系统的登陆记录，跟每一道题的提交记录。需求是处理成每个人每次登录后做了多少题，以及每道题的答题时间等相关记录。（处理完以后长这样） 做题记录有11W条，文件大小6MB。在拿到文件后，整个人一头雾水。之后稍微理了一下思路，求助了一下同学。最后决定先在excel里面按照学号排序，时间排序。然后存到数据库里面连接。存到数据库里面用到了=CONCATENATE(“INSERT INTO OJLGT(user_id, questionId,submitTime,result) VALUES(‘“ &amp; A2 &amp; “‘, ‘“ &amp; B2 &amp; “‘’, ‘“ &amp; D2 &amp; “‘’, ‘“ &amp; E2 &amp; “‘);”)把每一条excel记录转成了一条insert语句，然后把它插入到数据库里面。之后就是格式化时间SELECT STR_TO_DATE(submittime,’%d/%m/%Y %H:%i:%s’) from ojmess AS result;然后就是连接了，连接的时候每一条答题记录的提交时间要在本次登陆之后，下次登陆之前，用这个联系来把两张表连接起来。因为已经在excel里面排序了，所以这里就是一个找上一条，下一条的问题。select ojlogin.user_id, time, question_id,submitTime,result from ojlogin, ojmess where ojlogin.user_id=ojmess.user_id and unix_timestamp(submitTime)&gt;unix_timestamp(time) and unix_timestamp(submitTime)&lt; (select unix_timestamp(time) from ojlogin as t where t.id =ojlogin.id+1) select ( (select unix_timestamp(submitTime) from ojinfo as t where t.id =ojinfo.id+1) - UNIX_TIMESTAMP(submitTime))/60 dif_second from ojinfo UPDATE ojmtINNER JOIN ( SELECT * FROM ( SELECT id AS dd, STR_TO_DATE( submittime, ‘%d/%m/%Y %H:%i:%s’ ) submittime2 FROM ojmt ) a ) b ON b.dd = ojmt.idSET ojmt.submittime = b.submittime2; 中间用了一些现在我也想不太起来的sql查询，贴在这里，万一以后哪天能用到呢。之后就是执行查询语句啦。（跑了20多分钟，太难了，不会对语句进行优化）到这里数据就连好了。难题也就解决了，之后要格式化一些记录，我就把数据又导出到excel表格里面（excel）函数执行的速度还是很快的。这处理过程遇到了一个格式化问题ID的问题，因为ID在表格里面不连续，我就把ID又排了个序，然后放在了另一个sheet里，通过下面的函数拿出来。=INDEX(Sheet5!B:B,MATCH(C2,Sheet5!C:C,0))，最近乱七八糟的事情比较多，就先写到这儿吧~]]></content>
  </entry>
  <entry>
    <title><![CDATA[扶不起来的OJ]]></title>
    <url>%2F2019%2F10%2F27%2F%E6%89%B6%E4%B8%8D%E8%B5%B7%E6%9D%A5%E7%9A%84OJ1%2F</url>
    <content type="text"><![CDATA[&#8195;最近被拽去协助开发OJ系统（SSM网站），整个过程非常糊。录题，改sql文件，读代码，改代码，改题。自己本来用SSM做项目的时候，都是站在巨人的肩上，涉及sql语句的问题全靠lombok，controller的返回全靠队友写好的注释，自己直接用就行。也没给自己留下什么特别深刻的印象。这次虽然有点赶鸭子上架，但是对SSM框架的认识也算是比原来多了那么一丢丢。 &#8195;目前做出来的算是个0配的LeetCode吧（用人家的名字都感觉在蹭），最起码题都是上面的。运行逻辑也比较单纯，页面传进来代码，后台拼完以后生成源文件（目前只支持java和c）。然后调命令运行，拿结果跟前期录入的测试用例的结果对照。可惜除了题给的示例意外，我们也没找别的测试用例（找不到也写不出来）。黑盒测试的测试用例要做到全覆盖，像我这种题都不一定能做出来的人，还是不去想了。有几个用几个吧。 &#8195;虽然是中途加入，但是因为基础相对比较好，就自告奋勇的帮他们解决比较难的问题了。都遇到了什么问题呢？主要集中在把用户写好的函数拼成能执行的函数。其实整个项目他们接手的时候，基本也就剩这么点活跟录题了。解决问题的过程中，也发现了一个不太懂得C语言相关的问题（因为要求支持C语言，只能硬着头皮上了）。最开始看到跟数组相关的题都会在解答函数里面加上returnSize，numSize这种表示数组大小的参数的时候，自己也是一头雾水，尝试了几次更懵逼了。请教同学之后，才明白到底是为啥。 &#8195;C的数组没有什么封装，在不知道个数只有开始位置的时候，编译器也不知道要遍历到哪儿。也在研究的过程中顺便学习了一下指针，指针最开始真是相当让我迷幻了。但是现在对它有了一点点的了解，不一定对。当我们声明一个指针类型的变量的时候，表示这个变量只会存储号前面数据类型的地址（int, char*）。而在别的地方用+变量名的时候，我现在的理解就是查找这一个变量存储的地址里面的值（几个星就找几次）。最后记录一下跑题的时候遇到的问题，感觉跟char* 和 char[]的初始化有关。 num[j] = num[j + 1]; num[length] = ‘\0’;（导致报错的代码）]]></content>
  </entry>
  <entry>
    <title><![CDATA[近期总结]]></title>
    <url>%2F2019%2F10%2F19%2F20191019082242%2F</url>
    <content type="text"><![CDATA[近期理解了五子棋的实现思路看懂了博弈树 AB剪枝 负极大值算法 启发式搜索然后自己也努力照着人家的代码实现了一下，实现的结果有点呆- -]]></content>
  </entry>
  <entry>
    <title><![CDATA[五子棋]]></title>
    <url>%2F2019%2F10%2F08%2F%E4%BA%94%E5%AD%90%E6%A3%8B%2F</url>
    <content type="text"><![CDATA[简单的五子棋实现 存在问题 3层计算非常慢]]></content>
  </entry>
  <entry>
    <title><![CDATA[图片上传]]></title>
    <url>%2F2019%2F09%2F29%2F%E4%BB%B7%E5%80%BC%E8%BF%AD%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[格子世界 终于可以传图了]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
